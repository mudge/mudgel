grammar Mudgel3
  rule statement
    sequence
  end

  rule sequence
    '(do' mandatory_whitespace first:sequenced_statement mandatory_whitespace second:sequence ')' {
      def to_ast
        Sequence.new(first.to_ast, second.to_ast)
      end
    }
    /
    sequenced_statement
  end

  rule sequenced_statement
    while / assign / if / println
  end

  rule while
    '(while' mandatory_whitespace condition:expression mandatory_whitespace body:statement ')' {
      def to_ast
        While.new(condition.to_ast, body.to_ast)
      end
    }
  end

  rule assign
    '(let' mandatory_whitespace name:[a-z]+ mandatory_whitespace expression ')' {
      def to_ast
        Assign.new(name.text_value.to_sym, expression.to_ast)
      end
    }
  end

  rule if
    '(if' mandatory_whitespace condition:expression mandatory_whitespace consequence:statement mandatory_whitespace alternative:statement ')' {
      def to_ast
        If.new(condition.to_ast, consequence.to_ast, alternative.to_ast)
      end
    }
  end

  rule expression
    less_than
  end

  rule less_than
    '(<' mandatory_whitespace left:increment mandatory_whitespace right:less_than ')' {
      def to_ast
        LessThan.new(left.to_ast, right.to_ast)
      end
    }
    /
    equals
  end

  rule equals
    '(=' mandatory_whitespace left:increment mandatory_whitespace right:equals ')' {
      def to_ast
        Equal.new(left.to_ast, right.to_ast)
      end
    }
    /
    increment
  end

  rule increment
    '(inc' mandatory_whitespace value:increment ')' {
      def to_ast
        Increment.new(value.to_ast)
      end
    }
    /
    modulo
  end

  rule modulo
    '(%' mandatory_whitespace left:term mandatory_whitespace right:modulo ')' {
      def to_ast
        Modulo.new(left.to_ast, right.to_ast)
      end
    }
    /
    term
  end

  rule println
    '(print' mandatory_whitespace term ')' {
      def to_ast
        Println.new(term.to_ast)
      end
    }
  end

  rule term
    number / text / variable
  end

  rule number
    [0-9]+ {
      def to_ast
        Number.new(text_value.to_i)
      end
    }
  end

  rule variable
    [a-z]+ {
      def to_ast
        Variable.new(text_value.to_sym)
      end
    }
  end

  rule text
    '"' value:[^"]+ '"' {
      def to_ast
        Text.new(value.text_value)
      end
    }
  end

  rule mandatory_whitespace
    [\s\n]+
  end

  rule whitespace
    [\s\n]*
  end
end

