grammar Mudgel
  rule statement
    sequence
  end

  rule sequence
    'firstly, ' first:sequenced_statement ' followed by ' second:sequence {
      def to_ast
        Sequence.new(first.to_ast, second.to_ast)
      end
    }
    /
    sequenced_statement
  end

  rule sequenced_statement
    while / assign / if / println
  end

  rule while
    'while ' condition:expression ', ' body:statement {
      def to_ast
        While.new(condition.to_ast, body.to_ast)
      end
    }
  end

  rule assign
    'let ' name:[a-z]+ ' be ' expression {
      def to_ast
        Assign.new(name.text_value.to_sym, expression.to_ast)
      end
    }
  end

  rule if
    'if ' condition:expression ' then ' consequence:statement ' otherwise ' alternative:statement {
      def to_ast
        If.new(condition.to_ast, consequence.to_ast, alternative.to_ast)
      end
    }
  end

  rule expression
    less_than
  end

  rule less_than
    left:increment ' is less than ' right:less_than {
      def to_ast
        LessThan.new(left.to_ast, right.to_ast)
      end
    }
    /
    equals
  end

  rule equals
    left:increment ' is equal to ' right:equals {
      def to_ast
        Equal.new(left.to_ast, right.to_ast)
      end
    }
    / increment
  end

  rule increment
    'one more than ' value:modulo {
      def to_ast
        Increment.new(value.to_ast)
      end
    }
    /
    modulo
  end

  rule modulo
    'the remainder after dividing ' left:term ' and ' right:modulo {
      def to_ast
        Modulo.new(left.to_ast, right.to_ast)
      end
    }
    /
    term
  end

  rule term
    number / text / variable
  end

  rule number
    [0-9]+ {
      def to_ast
        Number.new(text_value.to_i)
      end
    }
  end

  rule variable
    'something known as ' name:[a-z]+ {
      def to_ast
        Variable.new(name.text_value.to_sym)
      end
    }
  end

  rule text
    '"' value:[A-Za-z ]+ '"' {
      def to_ast
        Text.new(value.text_value)
      end
    }
  end

  rule println
    'print ' term {
      def to_ast
        Println.new(term.to_ast)
      end
    }
  end
end
